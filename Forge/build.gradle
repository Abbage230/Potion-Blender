buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven {
            url = 'https://repo.spongepowered.org/repository/maven-public/'
            content { includeGroup "org.spongepowered" }
        }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
plugins {
    id 'java'
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '5.1.+'
}

apply plugin: 'org.spongepowered.mixin'

tasks.withType(JavaExec) {
    enableAssertions = true
}


archivesBaseName = "${mod_name}-${minecraft_version}-FORGE"
if (System.getenv().RELEASE_MODE == null) {
    archivesBaseName += '-SNAPSHOT'
}


mixin{
 add sourceSets.main, "potionblender.refmap.json"
    config 'potionblender.mixins.json'

    if (System.getenv().RELEASE_MODE == null) {
        archivesBaseName += '-SNAPSHOT'
    }
}

minecraft {
    mappings channel: 'official', version: minecraft_version
    
    if (project.hasProperty('forge_ats_enabled') && project.findProperty('forge_ats_enabled').toBoolean()) {
        // This location is hardcoded in Forge and can not be changed.
        // https://github.com/MinecraftForge/MinecraftForge/blob/be1698bb1554f9c8fa2f58e32b9ab70bc4385e60/fmlloader/src/main/java/net/minecraftforge/fml/loading/moddiscovery/ModFile.java#L123
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
        project.logger.debug('Forge Access Transformers are enabled for this project.')
    }

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Client'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modClientRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            taskName 'Server'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modServerRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            taskName 'Data'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                modDataRun {
                    source sourceSets.main
                    source project(":Common").sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    compileOnly project(":Common")
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

processResources {

    from project(":Common").sourceSets.main.resources

    inputs.properties(
            "mod_id" : mod_id,
            "version": project.version,
            "mod_name": mod_name,
            "mod_description" : mod_description,
            "forge_version": forge_version,
            "minimum_forge_version": minimum_forge_version,
            "mod_author": mod_author,
            "minecraft_version": minecraft_version
    )


    filesMatching("META-INF/mods.toml") {
        expand (
                "mod_id": mod_id,
                "version": project.version,
                "mod_name" : mod_name,
                "mod_description" : mod_description,
                "mod_author" : mod_author,
                "forge_version": forge_version,
                "minimum_forge_version": minimum_forge_version,
                "minecraft_version": minecraft_version
        )
    }

    filesMatching('pack.mcmeta') {
        expand("mod_name": mod_name)
    }
}



jar{
    manifest {
        attributes([
                "Specification-Title": mod_name,
                "Specification-Vendor": mod_author,
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": mod_name,
                "Implementation-Version": version,
                "Implementation-Vendor" : mod_author,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    finalizedBy('reobfJar')
}


